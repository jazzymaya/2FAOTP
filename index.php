<!--Code inspired by https://codeshack.io/secure-login-system-php-mysql/#authenticatinguserswithphp-->
<!--This page, index.php is the first page the users see upon accessing the site. Here is the logic for: checking the database for the user and authenticating him/her, generating an alphanumeric unique one-time passcode with the length of 6, sending this OTP to the user via email, and redirecting them to the otp.php page.-->
<?php
/*This function allows us to redirect the user to the next page 
(otp.php) only if the user has been authenticated, found within our database, an OTP has been created, 
and received a successful email. The header() function sends a raw HTTP header to the client. It must be called before any output is sent. We call exit() so that the script does not continue past the header function.*/
function redirect($url) //https://www.exchangecore.com/blog/how-redirect-using-php
{
    header('Location: '.$url);
    exit();
}
//This function allows a session to be created. With sessions you can save information from this page and reference it from another.
session_start();
//Here we initialize these vairbales to null/empty. They will hold our error/success messages to be displayed to the user. Note that some of these variables will not be displayed to the user or they are only displayed for debugging purposes.
$usrerr = $emailerr = $emailsuccess = $pwerr = $bothEmpty = '';
//PHPMailer is an API to send emails within PHP applications. Here, we declare our application to use PHPMailer and to use its Exception package for potential errors. https://github.com/PHPMailer/PHPMailer
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
//The file structure 'vendor/autoload.php' was generated by composer.
require 'vendor/autoload.php';
//This if statement only runs if the user has submitted their response via POST AND the username AND password fields were not submitted with empty values.
if($_SERVER['REQUEST_METHOD'] == 'POST' && !empty($_POST['username']) && !empty($_POST['password'])) {
//Here we declare our database (MariaDB/MySQL) information. You should change this to your connection info.
$DATABASE_HOST = 'localhost';
$DATABASE_USER = 'root';
$DATABASE_PASS = '';
$DATABASE_NAME = '';
// Try and connect using the info above.
$con = mysqli_connect($DATABASE_HOST, $DATABASE_USER, $DATABASE_PASS, $DATABASE_NAME);
if ( mysqli_connect_errno() ) {
	// If there is an error with the connection, stop the script and display the error.
	exit('Failed to connect to MySQL: ' . mysqli_connect_error());
}
/* Preparing the SQL statement will prevent SQL injection because parameter values, 
which are transmitted later using a different protocol, need not be correctly escaped. If the original statement 
template is not derived from external input, SQL injection cannot occur. https://www.w3schools.com/php/php_mysql_prepared_statements.asp */ 
if ($stmt = $con->prepare('SELECT id, password, email FROM accounts WHERE username = ?')) {
	// Bind parameters (s = string, i = int, b = blob, etc), in our case the username is a string so we use "s"
	$stmt->bind_param('s', $_POST['username']);
	//Execute the SQL statement
	$stmt->execute();
	// Store the result so we can check if the account exists in the database.
	$stmt->store_result();
	//If the SQL statement returns 1 or more records, retain the id, password and email values where the username matches
	if ($stmt->num_rows > 0) {
		$stmt->bind_result($id, $password, $email);
		$stmt->fetch();
		// Account exists, now we verify the password.
		// Password_verify is used to match the password_hash we used in our registration file.
		if (password_verify($_POST['password'], $password)) {
			// Verification success! User has loggedin!
			// Create sessions so we know the user is logged in. They are similar to cookies but remember the data on the server.
			session_regenerate_id();
			//We use this session to verify that the user has successfully logged in to be authorized to visit the otp.php page.
			$_SESSION['loggedin'] = TRUE;
			//We use this session to print the name of the user on the home.php page as well as validate the otp code with the associated username on the otp.php page
			$_SESSION['name'] = $_POST['username'];
			//The characters variable holds 0-9, a-z and A-Z as a string. This is used to create a random one time passcode for each user everytime they log in.
			$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
			//First, we call str_shuffle on our characters variable to generate a random string. Then we call substr() to make our OTP 6 characters long, hence the -6.
			$otp = substr(str_shuffle($characters), -6);
			//Here we prepare the SQL statement to update the optcode column within our database based on the user's username.
			if ($stmt = $con->prepare('UPDATE accounts SET otpcode = ? WHERE username = ?')) {
				$stmt->bind_param('ss', $otp, $_POST['username']);
				$stmt->execute();
				$stmt->store_result();
			}
			//We declare a new PHPMailer object to send an email to the user.
			$mail = new PHPMailer();
			//Declaring the mail protocol to be used (Simple Mail Transfer Protocol)
			$mail->IsSMTP();
			//Debug arguement. 0 is false, 1 is true.
			$mail->SMTPDebug  = 0;  
			//Authenticate the email before sending. (Your email/where the email is from)
			$mail->SMTPAuth   = TRUE;
			//Secure method. Can be TLS or SSL
			$mail->SMTPSecure = "tls";
			//Port number for TLS
			$mail->Port       = 587;
			//SMTP server address from your email provider. For gmail it is smtp.gmail.com
			$mail->Host       = "";
			//The email address used to send emails to users
			$mail->Username   = "";
			//Password of the email account 
			$mail->Password   = "";

			//Send the email with HTML formatting.
			$mail->IsHTML(true);
			//Send the OTP email to the email address provided from the user during registration
			$mail->AddAddress($email, $_POST['username']);
			//Set the from address and the email title
			$mail->SetFrom("", "AltName");
			//Set the reply-to field and resolve it to the name "Sym"
			$mail->AddReplyTo("", "AltName");
			//Set the subject of the email
			$mail->Subject = "One-Time Passcode Login Credentials";
			//Here is the body of the email. It tells the user to enter the newly generated OTP code on the otp.php page
			$content = "Please enter this code on the 2FA Page: " . $otp;

			//Wrap the content variable (body) into HTML
			$mail->MsgHTML($content); 
			//Checks if the email did not successfully send
			if(!$mail->Send()) {
  				$emailerr = "Error while sending Email.";
  				var_dump($mail);
			} else {
				//Email send successfully and redirect the user to the otp.php page
				  $emailsuccess = "Email sent successfully";
				  redirect('otp.php');
			}
		
		} else {
			// Incorrect password
			$pwerr = "Incorrect username and/or password, please try again!"; //Debugging purposes
		}
	} else {
		// Incorrect username
		$usrerr = "Incorrect username and/or password, please try again!"; //Debugging purposes
	}

//Close the databse stmt variable as we are no longer submitting queries
	$stmt->close();
}
//This stmt only prints if you do not redirect the user to otp.php. Used for debugging purposes.
echo !empty($emailsuccess);
}
//Checks if the form was submitted with POST
if ($_SERVER["REQUEST_METHOD"] == "POST") {
	//Checks if the username OR password field was submitted empty
	if (empty($_POST["username"]) || empty($_POST["password"])) {
		$bothEmpty = "Please fill both the username and password fields!";
	  }
	  //Checks if the email error variable has a value (not null)
	 if (!empty($emailerr)) {
	  $emailerr = "Error while sending Email.";
	}
	//Checks if the password error variable has a value (not null)
	if (!empty($stmterr)) {
		$pwerr = "	Incorrect username and/or password, please try again!";
	}
	//Checks if the username error variable has a value (not null)
	if (!empty($usrerr)) {
		$usrerr ="	Incorrect username and/or password, please try again!";
	}
}
?>

<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Login</title>
		<!--Javascript used for the icons on the form-->
		<script src="https://kit.fontawesome.com/9d50a4422d.js" crossorigin="anonymous"></script>
		<!--Style sheet used for overall formatting of the webpages-->
		<link href="style.css" rel="stylesheet" type="text/css">
	</head>
	<body>
		<div class="bkg">
			<h1 class="lh1">Login</h1>
			<!--Each span statement is an error message, alerting the user if the fields are empty or the information is incorrect. 
			Not all of these message print because we re-route the user to the otp.php page.-->
			<span class="er"><?php echo $pwerr;?></span>
			<span class="er"><?php echo $usrerr;?></span>
			<span class="er"><?php echo $bothEmpty;?></span>
			<span class="er"><?php echo $emailerr;?></span>
			<form class="lfrm" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"])?>" method="post">
				<label class="label" for="username">
				<i class="fas fa-user-secret"></i>
				</label>
				<!--For the value field, we run a php script that will echo the user's input if any of the error message variables are not empty. 
				We echo the user's inputs so that they know what they typed, with the exception of passwords since it is masked.-->
				<input class="ltxt" type="text" name="username" placeholder="Username" id="username" 
				value = "<?php if (!empty($bothEmpty) || !empty($usrerr) || !empty($pwerr)) echo $_POST['username'];?>">
				<label class="label" for="password">
					<i class="fas fa-lock"></i>
				</label>
                <input class="lpw" type="password" name="password" placeholder="Password" id="password"
				value = "<?php if (!empty($bothEmpty) || !empty($usrerr) || !empty($pwerr)) echo $_POST['password'];?>">
				<!--Here we create the register button that resets all the field variables and re routes the user to the register.php page.-->
                <button class="side2" type="reset" onclick="location.href='register.php'">Register</button>
				<input class="side" type="submit" value="Submit">
			</form>
			<div id="back"></div>
			<div id="front"></div>
		</div>
	</body>
</html>